{"version":3,"sources":["service/PhoneBook.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","className","Filter","filterName","updateFilterName","value","onChange","event","target","PersonForm","addPerson","newName","setNewName","newNumber","setNewNumber","onSubmit","type","Number","person","remove","name","number","onClick","Persons","persons","removePerson","filter","toLowerCase","startsWith","map","key","App","useState","setMessage","setClassName","setFilterName","setPersons","useEffect","PhoneBook","clearMessage","preventDefault","foundPerson","find","window","confirm","updatedPerson","setTimeout","catch","error","console","log","concat","removedId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b4ad7b9.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => id)\n}\n\nexport default { getAll, create, update, remove }\n","import React, { useState, useEffect } from \"react\";\nimport PhoneBook from \"./service/PhoneBook\";\n\nconst Notification = ({ message, className }) =>\n    <div className={className}>\n        {message}\n    </div>\n\nconst Filter = ({ filterName, updateFilterName }) =>\n    <div>\n        filter shown with <input value={filterName}\n            onChange={event => updateFilterName(event.target.value)} />\n    </div>\n\n\nconst PersonForm = ({ addPerson, newName, setNewName, newNumber, setNewNumber }) =>\n    <form onSubmit={addPerson}>\n        <div>name: <input value={newName}\n            onChange={event => setNewName(event.target.value)} />\n        </div>\n        <div>number: <input value={newNumber}\n            onChange={event => setNewNumber(event.target.value)} /></div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form>\n\nconst Number = ({ person, remove }) =>\n    <p>{person.name} {person.number}\n        <button onClick={() => remove(person)}>delete</button></p>\n\nconst Persons = ({ persons, filterName, removePerson }) =>\n    persons.filter(person => person.name.toLowerCase().startsWith(filterName.toLowerCase()))\n        .map(person => <Number key={person.name} person={person}\n            remove={removePerson} />)\n\nconst App = () => {\n    const [message, setMessage] = useState('')\n    const [className, setClassName] = useState('')\n    const [filterName, setFilterName] = useState('')\n\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n\n    useEffect(() => {\n        PhoneBook.getAll()\n            .then(persons => setPersons(persons))\n    }, [])\n\n    const addPerson = (event) => {\n        event.preventDefault()\n\n        const foundPerson = persons.find(person => person.name === newName)\n        if (foundPerson) {\n            const agree = window.confirm(\n                `${newName} is already added to phonebook, replace the old number with a new one?`)\n            if (agree) {\n                PhoneBook.update(foundPerson.id, { ...foundPerson, number: newNumber })\n                    .then(updatedPerson => {\n                        setPersons(persons.map(person =>\n                            person.id === updatedPerson.id ? updatedPerson : person))\n                        setNewName('')\n                        setNewNumber('')\n                        setMessage(`${newName}'s number updated`)\n                        setClassName('success')\n                        setTimeout(clearMessage, 5000)\n                    })\n                    .catch(error => {\n                        setMessage(\"some error occured. see console for details\")\n                        setClassName('error')\n                        setTimeout(clearMessage, 5000)\n                        console.log(error)\n                    })\n            }\n        } else {\n            const newPerson = {\n                name: newName,\n                number: newNumber\n            }\n            PhoneBook.create(newPerson)\n                .then(person => {\n                    setPersons(persons.concat(person))\n                    setNewName('')\n                    setNewNumber('')\n                    setMessage(`Added ${newName}`)\n                    setClassName('success')\n                })\n                .catch(error => {\n                    console.log(\"failed to add person\", error.response.data)\n                    setMessage(error.response.data.error)\n                    setClassName('error')\n                })\n            setTimeout(clearMessage, 5000)\n        }\n    }\n\n    const removePerson = person => {\n        const agree = window.confirm(`Delete ${person.name}`)\n        if (agree) {\n            PhoneBook.remove(person.id)\n                .then(removedId => {\n                    setPersons(persons.filter(person => person.id !== removedId))\n                })\n        }\n    }\n\n    const clearMessage = () => {\n        setMessage('')\n        setClassName('')\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={message} className={className} />\n            <Filter filterName={filterName} updateFilterName={setFilterName} />\n            <h2>add a new</h2>\n            <PersonForm addPerson={addPerson} newName={newName} newNumber={newNumber}\n                setNewName={setNewName} setNewNumber={setNewNumber} />\n            <h2>Numbers</h2>\n            <Persons persons={persons} filterName={filterName} removePerson={removePerson} />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}